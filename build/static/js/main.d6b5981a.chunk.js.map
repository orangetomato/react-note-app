{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","evt","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","console","log","data","Object","keys","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d6b5981a.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const AlertContext = createContext();","import {createContext} from 'react';\r\n\r\nexport const FirebaseContext = createContext();","import React, {useState, useContext} from 'react';\r\nimport {AlertContext} from '../context/alert/alertContext';\r\nimport {FirebaseContext} from '../context/firebase/firebaseContext';\r\n\r\nexport const Form = () => {\r\n    const [value, setValue] = useState('');\r\n    const alert = useContext(AlertContext);\r\n    const firebase = useContext(FirebaseContext);\r\n\r\n    const submitHandler = evt => {\r\n        evt.preventDefault();\r\n        if (value.trim()) {\r\n            firebase.addNote(value.trim()).then(() => {\r\n                alert.show('Note was added', 'success');\r\n            }).catch(() => {\r\n                alert.show('Something went wrong', 'danger');\r\n            });\r\n            setValue('');\r\n        } else {\r\n            alert.show('Add text');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Add a title\"\r\n                    value={value}\r\n                    onChange={evt => setValue(evt.target.value)}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\r\n\r\nexport const Notes = ({notes, onRemove}) => (\r\n    <TransitionGroup component=\"ul\" className=\"list-group\">\r\n        {notes.map(note => (\r\n            <CSSTransition\r\n                key={note.id}\r\n                classNames={'note'}\r\n                timeout={800}\r\n            >\r\n                <li className=\"list-group-item note\">\r\n                    <div>\r\n                        <strong>{note.title}</strong>\r\n                        <small>{note.date}</small>\r\n                    </div>\r\n\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-danger btn-sm\"\r\n                        onClick={() => onRemove(note.id)}\r\n                    >\r\n                        &times;\r\n                    </button>\r\n                </li>\r\n            </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n)","import React from 'react';\r\n\r\nexport const Loader = () => (\r\n    <div className=\"text-center\">\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n);","import React, {Fragment, useContext, useEffect} from 'react';\r\nimport {Form} from '../components/Form';\r\nimport {Notes} from '../components/Notes';\r\nimport {FirebaseContext} from '../context/firebase/firebaseContext';\r\nimport {Loader} from '../components/Loader';\r\n\r\nexport const Home = () => {\r\n    const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext);\r\n\r\n    useEffect(() => {\r\n        fetchNotes();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form />\r\n            <hr />\r\n\r\n            {loading\r\n                ? <Loader />\r\n                : <Notes notes={notes} onRemove={removeNote} />\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const About = () => (\r\n    <div className=\"jumbotron\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">React App</h1>\r\n            <p className=\"lead\">version <strong>1.0.83695</strong></p>\r\n        </div>\r\n    </div>\r\n)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n        <div className=\"navbar-brand\">\r\n            Note App\r\n        </div>\r\n    \r\n        <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink\r\n                    className=\"nav-link\" \r\n                    to=\"/\"\r\n                    exact\r\n                >\r\n                    Main\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink\r\n                    className=\"nav-link\" \r\n                    to=\"/about\"\r\n                >\r\n                    Info\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)","import React, {useContext} from 'react';\r\nimport {AlertContext} from '../context/alert/alertContext';\r\nimport {CSSTransition} from 'react-transition-group';\r\n\r\nexport const Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext);\r\n\r\n    // if (!alert.visible) {\r\n    //     return null;\r\n    // } //it needs if you don't use CSSTransition\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={alert.visible}\r\n            timeout={{\r\n                enter: 500,\r\n                exit: 350\r\n            }}\r\n            classNames={'alert'}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n                <strong>Alert! </strong> \r\n                {alert.text}\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"close\" \r\n                    aria-label=\"Close\"\r\n                    onClick={hide}\r\n                >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}","import {SHOW_ALERT, HIDE_ALERT} from '../types';\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n    [HIDE_ALERT]: state => ({...state, visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","export const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const ADD_NOTE = 'ADD_NOTE';\r\nexport const FETCH_NOTES = 'FETCH_NOTES';\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE';","import React, {useReducer} from 'react';\r\nimport {AlertContext} from './alertContext';\r\nimport {alertReducer} from './alertReducer';\r\nimport {HIDE_ALERT, SHOW_ALERT} from '../types';\r\n\r\nexport const AlertState = ({children}) => {\r\n    const [state, dispatch] = useReducer(alertReducer, {visible: false});\r\n\r\n    const show = (text, type = 'warning') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {text, type}\r\n        });\r\n    }\r\n\r\n    const hide = () => dispatch({type: HIDE_ALERT});\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            show, hide,\r\n            alert: state\r\n        }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    );\r\n}","import {SHOW_LOADER, ADD_NOTE, FETCH_NOTES, REMOVE_NOTE} from '../types';\r\n\r\nconst handlers = {\r\n    [SHOW_LOADER]: state => ({\r\n        ...state, \r\n        loading: true\r\n    }),\r\n    [ADD_NOTE]: (state, {payload}) => ({\r\n        ...state, \r\n        notes: [...state.notes, payload]\r\n    }),\r\n    [FETCH_NOTES]: (state, {payload}) => ({\r\n        ...state, \r\n        notes: payload,\r\n        loading: false\r\n    }),\r\n    [REMOVE_NOTE]: (state, {payload}) => ({\r\n        ...state, \r\n        notes: state.notes.filter(note => note.id !== payload)\r\n    }),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT;\r\n    return handle(state, action);\r\n}","import React, {useReducer} from 'react';\r\nimport axios from 'axios';\r\nimport {FirebaseContext} from './firebaseContext';\r\nimport {firebaseReducer} from './firebaseReducer';\r\nimport {SHOW_LOADER, REMOVE_NOTE, ADD_NOTE, FETCH_NOTES} from '../types';\r\n\r\nconst url = process.env.REACT_APP_DB_URL;\r\n\r\nexport const FirebaseState = ({children}) => {\r\n    const initialState = {\r\n        notes: [],\r\n        loading: false\r\n    }\r\n    \r\n    const [state, dispatch] = useReducer(firebaseReducer, initialState);\r\n    \r\n    const showLoader = () => dispatch({type: SHOW_LOADER});\r\n    \r\n    const fetchNotes = async () => {\r\n        showLoader();\r\n        const res = await axios.get(`${url}/notes.json`);\r\n        console.log('fetchNotes', res.data);\r\n\r\n        const payload = Object.keys(res.data).map(key => {\r\n            return {\r\n                ...res.data[key],\r\n                id: key\r\n            }\r\n        });\r\n\r\n        dispatch({\r\n            type: FETCH_NOTES,\r\n            payload\r\n        });\r\n    }\r\n\r\n    const addNote = async title => {\r\n        const note = {\r\n            title, date: new Date().toJSON()\r\n        }\r\n\r\n        try {\r\n            const res = await axios.post(`${url}/notes.json`, note);\r\n            console.log('addNote', res.data);\r\n            const payload = {\r\n                ...note,\r\n                id: res.data.name\r\n            }\r\n\r\n            dispatch({\r\n                type: ADD_NOTE,\r\n                payload\r\n            });\r\n        } catch (error) {\r\n            throw new Error(error.message);\r\n        }\r\n\r\n    }\r\n\r\n    const removeNote = async id => {\r\n        await axios.delete(`${url}/notes/${id}.json`);\r\n\r\n        dispatch({\r\n            type: REMOVE_NOTE,\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider value={{\r\n            showLoader, addNote, removeNote, fetchNotes,\r\n            loading: state.loading,\r\n            notes: state.notes\r\n        }}>\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Home} from './pages/Home';\nimport {About} from './pages/About';\nimport {Navbar} from './components/Navbar';\nimport {Alert} from './components/Alert';\nimport {AlertState} from './context/alert/AlertState';\nimport {FirebaseState} from './context/firebase/FirebaseState';\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar />\n          <div className=\"container pt-4\">\n            <Alert />\n            <Switch>\n              <Route path={'/'} exact component={Home} />\n              <Route path={'/about'} exact component={About} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}